swagger: '2.0'
info:
  description: PCRecruiter API
  version: 1.0.0
  title: PCRecruiter API
  contact:
    email: overflow2341313@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: www.pcrecruiter.net
basePath: /rest/api
tags:
  - name: 'AccessToken'
  - name: 'Candidates'
  - name: 'Companies'
  - name: 'Interviews'
  - name: 'Placements'
  - name: 'Positions'
  - name: 'Rollup Lists'
  - name: 'System'
  - name: 'Users'
schemes:
  - https
consumes:
  - application/json
produces:
  - application/xml
  - application/json
paths:
  /access-token:
    get:
      operationId: getAccessToken
      tags:
        - AccessToken
      summary: "Retrieve a valid API session."
      description: "When retrieving a SessionId the request must <strong>always</strong> be made over an <strong>https connection</strong>.<br /> The SessionID returned will include the APIKey, AppId, DatabaseID, and User for use in subsequent API calls."
      parameters:
        - name: DatabaseId
          in: query
          description: "The database identifier for the database you wish to connect to"
          required: true
          type: string
        - name: Username
          in: query
          description: "The username for the login credentials"
          required: true
          type: string
        - name: Password
          in: query
          description: "The password for the user"
          required: true
          type: string
        - name: AppId
          in: query
          description: "Your private Application Id"
          required: true
          type: string
        - name: ApiKey
          in: query
          description: "Your private Api Key"
          required: true
          type: string
        - name: Accept-Language
          in: header
          description: "Specifies the Localization for the request"
          required: false
          type: string
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AccessToken"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    delete:
      operationId: deleteAccessToken
      tags:
        - AccessToken
      summary: "Log user off"
      description: "Calling Access-Token with the DELETE method will Log the User Name from the SessionID out of the API.  Upon making a successful DELETE the response will be <strong>True</strong>."
      parameters:
        - name: Accept-Language
          in: header
          type: string
          
          required: false
          description: "Specifies the Localization for the request"
      responses:
        204:
          description: "AccessToken has been deleted."
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /candidates:
    get:
      operationId: getCandidate
      tags:
        - Candidates
      summary: "Search Candidate Records."
      description: "Fields listed as Date will be returned in ISO 8601 Format.<br />Custom Date fields will be returned based on the Accept Language unless they are stored with alpha and numeric characters. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified.<br />When searching for records on a rollup list, use the field name Rollup."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: Accept-Language
          in: header
          type: string
          required: false
          description: "Specifies the Localization for the request"
        - name: Fields
          in: query
          type: string
          required: false
          
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Custom
          in: query
          type: string
          
          required: false
          description: "The custom field that you want to retrieve (comma separated)"
        - name: Eeoc
          in: query
          type: string
          required: false
          
          description: "The eeoc fields that you want to retrieve (comma separated).  Fields available include:  race, gender, source, location, OFCCP, category."
        - name: Query
          in: query
          type: string
          required: false
          
          description: "Create a search"
        - name: Keywords
          in: query
          type: string
          required: false
          
          description: "Search records by keyword"
        - name: Order
          in: query
          type: string
          required: false
          
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          
          description: "Define how many results will return per page (maximum 100)."
        - name: Filter
          in: query
          type: string
          required: false
          
          description: "Include additional filters to the query to limit or append items to the result. Supported filters for this resource included: Deleted."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CandidatesResponseSchemaScribe"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    post:
      operationId: createCandidate
      tags:
        - Candidates
      summary: "Create a new Candidate."
      description: "Batch processing to create more than one Candidate per request is currently not supported."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: Candidate
          in: body
          required: true
          description: "The Candidate to create"
          schema:
            $ref: "#/definitions/Candidate"
      responses:
        200:
          description: "Candidate created."
          schema:
            $ref: "#/definitions/CandidateIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /candidates/{CandidateId}:
    get:
      operationId: getCandidateByID
      tags:
        - Candidates
      summary: "Get a Candidate by CandidateId"
      description: "Fields listed as Date will be returned in ISO 8601 Format.<br />Custom Date fields will be returned based on the Accept Language unless they are stored with alpha and numeric characters. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateID of the candidate record that needs to be fetched."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Custom
          in: query
          type: string
          required: false
          description: "The custom field that you want to retrieve (comma separated)"
        - name: Eeoc
          in: query
          type: string
          required: false
          description: "The eeoc fields that you want to retrieve (comma separated).  Fields available include:  race, gender, source, location, OFCCP, category."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Candidate"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    put:
      operationId: updateCandidateByID
      tags:
        - Candidates
      summary: "Update a Candidate by CandidateId"
      description: "A successful update of a candidate record will return the CandidateId of the record."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateID of the candidate record that needs to be fetched."
        - name: Candidate
          in: body
          required: true
          description: "The Candidate to update"
          schema:
            $ref: "#/definitions/Candidate"
      responses:
        200:
          description: "The Candidate has been updated"
          schema:
            $ref: "#/definitions/CandidateIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    delete:
      operationId: deleteCandidateById
      tags:
        - Candidates
      summary: "Delete a Candidate by ID."
      description: Calling /Candidates/{CandidateId}with the DELETE method will Delete that candidate from the database assoicated with the session token.  Upon making a successful DELETE the response will be <strong>True</strong>."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: Accept-Language
          in: header
          type: string
          required: false
          description: "Specifies the Localization for the request"
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the Candidate to be deleted."
      responses:
        204:
          description: "Candidate has been deleted."
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /candidates/{CandidateId}/attachments:
    get:
      operationId: getCandidateAttachmentsByID
      tags:
        - Candidates
      summary: "Get Attachments by CandidateId"
      description: "This resource returns candidate attachments for a requested candidate."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateID of the candidate record that needs to be fetched."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Query
          in: query
          type: string
          required: false
          
          description: "Create a search"
        - name: Order
          in: query
          type: string
          required: false
          
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          
          description: "Define how many results will return per page (maximum 100)."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/GetAttachmentsResponseScribe"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    post:
      operationId: createdCandidateAttachment
      tags:
        - Candidates
      summary: "Create a new Candidate Attachment"
      description: "Batch processing to create more than one candidate attachment per request is currently not supported."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateID of the candidate record that needs to be fetched."
        - name: "Candidate Attachments Body"
          in: body
          required: true
          description: "The Candidate Attachment to create"
          schema:
            $ref: "#/definitions/Attachment"
      responses:
        200:
          description: "Candidate Attachment has been created."
          schema:
            $ref: "#/definitions/AttachmentIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /candidates/{CandidateId}/attachments/{AttachmentId}:
    get:
      operationId: getCandidateAttachmentByAttachmentID
      tags:
        - Candidates
      summary: "Get Candidate Attachment by AttachmentId"
      description: "This resource returns candidate attachments for a requested candidate."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateID of the candidate record that needs to be fetched."
        - name: AttachmentId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the requested attachment."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Attachment"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    put:
      operationId: updateCandidateAttachmentByAttachmentId
      tags:
        - Candidates
      summary: "Update a Candidate Attachment"
      description: Batch processing to update more than one candidate attachment per request is currently not supported."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: AttachmentId
          in: path
          type: integer
          format: int64
          required: true
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateID of the candidate record that needs to be fetched."
        - name: "Candidate Attachments Body"
          in: body
          required: true
          description: "The Candidate Attachment to create"
          schema:
            $ref: "#/definitions/Attachment"
      responses:
        200:
          description: "Candidate Attachment has been updated."
          schema:
            $ref: "#/definitions/AttachmentIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /candidates/activities:
    get:
      operationId: getCandidateActivities
      tags:
        - Candidates
      summary: "Search Candidate Activities"
      description: "Fields listed as Date will be returned in ISO 8601 Format. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Query
          in: query
          type: string
          required: false
          description: "Create a search"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
        - name: Filter
          in: query
          type: string
          required: false
          description: "Include additional filters to the query to limit or append items to the result. Supported fitlers for this resource included: Deleted."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CandidateActivitiesResponseSchemaScribe"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /candidates/activities/{ActivityId}:
    get:
      operationId: getCandidateActivityById
      tags:
        - Candidates
      summary: "Search Candidate Activities"
      description: Fields listed as Date will be returned in ISO 8601 Format. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: ActivityId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the activity that needs to be fetched."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CandidateActivity"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /candidates/{CandidateId}/activities:
    get:
      operationId: getCandidateActivity
      tags:
        - Candidates
      summary: "Search Candidate Actitities by CandidateId"
      description: "Fields listed as Date will be returned in ISO 8601 Format. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateID of the candidate record that needs to be fetched."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Query
          in: query
          type: string
          required: false
          description: "Create a search"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
        - name: Filter
          in: query
          type: string
          required: false
          description: "Include additional filters to the query to limit or append items to the result. Supported fitlers for this resource included: Deleted."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CandidateActivitiesResponseSchemaScribe"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    post:
      operationId: createCandidateActivity
      tags:
        - Candidates
      summary: "Create a new Candidate Activity"
      description: "Batch processing to create more than one candidate activity per request is currently not supported."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateID of the candidate record that needs to be fetched."
        - name: "Candidate Activity"
          in: body
          required: true
          description: "The Candidate Activity to create"
          schema:
            $ref: "#/definitions/CandidateActivity"
      responses:
        200:
          description: "Candidate Activity has been created."
          schema:
            $ref: "#/definitions/CandidateActivityIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /candidates/{CandidateId}/resumes:
    get:
      operationId: getCandidateResume
      tags:
        - Candidates
      summary: "Return a Candidate's Resume"
      description: "This resource will return the candidates latest resume."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateID of the candidate record that needs to be fetched."
        - name: Header
          in: query
          type: boolean
          required: false
          description: "Set this parameter to true to get the resume with the current users header."
        - name: Footer
          in: query
          type: boolean
          required: false
          description: "Set this parameter to true to get the resume with the current users footer."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ResumesResponseSchemaScribe"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    post:
      operationId: createCandidateResume
      tags:
        - Candidates
      summary: "Create a new Candidate Resume"
      description: "This request will add a resume to the candidate. The resume data should be base64 encoded before submitting."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateID of the candidate record that needs to be fetched."
        - name: "Candidate Resume"
          in: body
          required: true
          description: "The Candidate Resume to create"
          schema:
            $ref: "#/definitions/Resume"
      responses:
        200:
          description: "Candidate Resume has been created."
          schema:
            $ref: "#/definitions/Resume"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    put:
      operationId: updateCandidateResume
      tags:
        - Candidates
      summary: "Update a Candidate Resume"
      description: "This request will update a resume for the current candidate.  The resume data should be base64 encoded before submitting."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateID of the candidate record that needs to be fetched."
        - name: "Candidate Resume"
          in: body
          required: true
          description: "The Candidate Resume to create"
          schema:
            $ref: "#/definitions/Resume"
      responses:
        200:
          description: "Candidate Resume has been created."
          schema:
            $ref: "#/definitions/Resume"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /candidates/{CandidateId}/blindedresumes:
    get:
      operationId: getCandidateBlindedResume
      tags:
        - Candidates
      summary: "Return a Candidate's Blinded Resume"
      description: "This resource will return the candidates latest blinded resume."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateID of the candidate record that needs to be fetched."
        - name: Header
          in: query
          type: boolean
          required: false
          description: "Set this parameter to true to get the resume with the current users header."
        - name: Footer
          in: query
          type: boolean
          required: false
          description: "Set this parameter to true to get the resume with the current users footer."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ResumesResponseSchema"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    post:
      operationId: createCandidateBlindedResume
      tags:
        - Candidates
      summary: "Create a new Candidate Blinded Resume"
      description: "This request will add a blinded resume to the candidate. The resume data should be base64 encoded before submitting."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateID of the candidate record that needs to be fetched."
        - name: "Candidate Resume"
          in: body
          required: true
          description: "The Candidate Blinded Resume to create"
          schema:
            $ref: "#/definitions/Resume"
      responses:
        200:
          description: "Candidate Blinded Resume has been created."
          schema:
            $ref: "#/definitions/Resume"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    put:
      operationId: updateCandidateBlindedResume
      tags:
        - Candidates
      summary: "Update a Candidate Blinded Resume"
      description: "This request will update a blinded resume for the current candidate.  The resume data should be base64 encoded before submitting."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateID of the candidate record that needs to be fetched."
        - name: "Candidate Resume"
          in: body
          required: true
          description: "The Candidate Resume to create"
          schema:
            $ref: "#/definitions/Resume"
      responses:
        200:
          description: "Candidate Blinded Resume has been updated."
          schema:
            $ref: "#/definitions/Resume"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /candidates/DistinctFields:
    get:
      operationId: getCandidateDistinctFields
      tags:
        - Candidates
      summary: "Get Distinct Fields"
      description: "Fields listed as Date will be returned in ISO 8601 Format.<br />Custom Date fields will be returned based on the Accept Language unless they are stored with alpha and numeric characters. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified.<br />When searching for records on a rollup list, use the field name Rollup."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: Custom
          in: query
          type: string
          required: false
          description: "The custom field that you want to retrieve (comma separated)"
        - name: Rollups
          in: query
          type: string
          required: false
          description: "Rollup List which the record will be on."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/DistinctFields"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /candidates/rolluplists/{RollupCode}:
    get:
      operationId: getCandidateRollupRecordsByRollupCode
      tags:
        - Candidates
      summary: "Search for Candidate Rollup Records by Rollup Code"
      description: "Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: RollupCode
          in: path
          type: string
          required: true
          description: "The Rollup you want to retrieve candidates rollup records from"
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CandidateRollupRecord"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /candidates/rolluplists/{RollupCode}/{CandidateId}:
    get:
      operationId: getCandidateRollupRecordByRollupCodeAndCandidateId
      tags:
        - Candidates
      summary: "Get a Candidate Rollup Record by Rollup Code And Candidate Id"
      description: "Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: RollupCode
          in: path
          type: string
          required: true
          description: "The Rollup you want to retrieve candidates rollup records from"
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateId of the candidate record you wish to retrieve from the rollup"
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CandidateRollupRecord"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    post:
      operationId: addCandidateToRollupList
      tags:
        - Candidates
      summary: "Add a Candidate to a Rollup List"
      description: "Add a Candidate to a Rollup List"
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: RollupCode
          in: path
          type: string
          required: true
          description: "The Rollup you want to retrieve candidates rollup records from"
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateId of the candidate record you wish to retrieve from the rollup"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CandidateRollupRecord"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    put:
      operationId: updateCandidateRollupById
      tags:
        - Candidates
      summary: "Update a Candidate Rollup Record"
      description: "A successful update of a candidate rollup record will return <strong>True</strong>"
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: RollupCode
          in: path
          type: string
          required: true
          description: "The Rollup you want to retrieve candidates rollup records from"
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateId of the candidate record you wish to retrieve from the rollup"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CandidateRollupRecord"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    delete:
      operationId: deleteCandidateRollupById
      tags:
        - Candidates
      summary: "Delete a Candidate Rollup Record"
      description: "Upon making a successful DELETE the response will be <strong>True</strong>."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: RollupCode
          in: path
          type: string
          required: true
          description: "The Rollup you want to retrieve candidates rollup records from"
        - name: CandidateId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CandidateId of the candidate record you wish to retrieve from the rollup"
      responses:
        204:
          description: "Candidate has been removed from Rollup List"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /companies:
    get:
      operationId: getCompanies
      tags:
        - Companies
      summary: "Search Company Records"
      description: "Fields listed as Date will be returned in ISO 8601 Format.<br />Custom Date fields will be returned based on the Accept Language unless they are stored with alpha and numeric characters. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified.<br />When searching for records on a rollup list, use the field name Rollup."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Custom
          in: query
          type: string
          required: false
          description: "The custom fields that you would like to retrieve (comma separated)"
        - name: Eeoc
          in: query
          type: string
          required: false
          description: "The eeoc fields that you want to retrieve (comma separated).  Fields available include: category, location, OFCCP."
        - name: Query
          in: query
          type: string
          required: false
          description: "Create a search"
        - name: Keywords
          in: query
          type: string
          required: false
          description: "Search records by keyword"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
        - name: Filter
          in: query
          type: string
          required: false
          description: "Include additional filters to the query to limit or append items to the result. Supported filters for this resource included: Deleted."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CompaniesResponseSchemaScribe"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    post:
      operationId: createCompany
      tags:
        - Companies
      summary: "Create a new Company."
      description: "Batch processing to create more than one company per request is currently not supported."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: Company
          in: body
          required: true
          description: "The Company to create"
          schema:
            $ref: "#/definitions/Company"
      responses:
        200:
          description: "Company created."
          schema:
            $ref: "#/definitions/CompanyIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /companies/{CompanyId}:
    get:
      operationId: getCompanyByCompanyId
      tags:
        - Companies
      summary: "Get a Company by CompanyId"
      description: "Fields listed as Date will be returned in ISO 8601 Format.<br />Custom Date fields will be returned based on the Accept Language unless they are stored with alpha and numeric characters. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified.<br />When searching for records on a rollup list, use the field name Rollup."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CompanyId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the company that needs to be fetched."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Custom
          in: query
          type: string
          required: false
          description: "The custom field that you would like to retrieve (comma separated)"
        - name: Eeoc
          in: query
          type: string
          required: false
          description: "The eeoc fields that you want to retrieve (comma separated). Fields available include: category, location, OFCCP."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Company"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    put:
      operationId: updateCompanyByCompanyId
      tags:
        - Companies
      summary: "Update a Company By CompanyId"
      description: "A successful update of a company record will return the CompanyId of the record."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CompanyId
          in: path
          type: integer
          format: int64
          required: true
          description: "The CompanyId of the company that needs to be updated."
        - name: Company
          in: body
          required: true
          schema:
            $ref: "#/definitions/Company"
          description: "The company to update"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CompanyIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /companies/{CompanyId}/attachments:
    get:
      operationId: getAttachmentsByCompanyId
      tags:
        - Companies
      summary: "Get an Attachment by CompanyId"
      description: "This resource returns company attachments for a requested company."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CompanyId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the company that needs to be fetched."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Query
          in: query
          type: string
          required: false
          description: "Create a Search"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/GetAttachmentsResponseScribe"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    post:
      operationId: createCompanyAttachment
      tags:
        - Companies
      summary: "Create a new Company Attachment"
      description: "Batch processing to create more than one company attachment per request is currently not supported."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CompanyId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the company that needs to be fetched."
        - name: "Company Attachments Body"
          in: body
          required: true
          schema:
            $ref: "#/definitions/Attachment"
          description: "The Company Attachment to create"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AttachmentIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /companies/{CompanyId}/attachments/{AttachmentId}:
    get:
      operationId: getCompanyAttachmentByAttachmentId
      tags:
        - Companies
      summary: "Get Company Attachment by AttachmentId"
      description: "This resource returns company attachments for a requested position."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CompanyId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position that needs to be fetched."
        - name: AttachmentId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the requested attachment."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Attachment"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    put:
      operationId: updateCompanyAttachmentByAttachmentId
      tags:
        - Companies
      summary: "Update a Company Attachment"
      description: "Batch processing to update more than one company attachment per request is currently not supported."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: AttachmentId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position attachment for the request."
        - name: CompanyId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the company for the request."
        - name: "Company Attachments Body"
          in: body
          required: true
          schema:
            $ref: "#/definitions/Attachment"
          description: "The Company Attachment to update"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AttachmentIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /companies/{CompanyId}/activities:
    get:
      operationId: getCompanyActivitiesByCompanyId
      tags:
        - Companies
      summary: "Search Company Actitities by CompanyId"
      description: "Fields listed as Date will be returned in ISO 8601 Format. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CompanyId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the company that needs to be fetched."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Query
          in: query
          type: string
          required: false
          description: "Create a Search"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
        - name: Filter
          in: query
          type: string
          required: false
          description: "Include additional filters to the query to limit or append items to the result. Supported filters for this resource included: Deleted."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CompanyActivitiesResponseSchemaScribe"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    post:
      operationId: createCompanyActivity
      tags:
        - Companies
      summary: "Create a new Company Activity"
      description: "Batch processing to create more than one company activity per request is currently not supported."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: CompanyId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position for the request."
        - name: "Company Activity"
          in: body
          required: true
          schema:
            $ref: "#/definitions/CompanyActivity"
          description: "The Company Activity to create"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CompanyActivityIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response"
  /companies/activities:
    get:
      operationId: getCompanyActivities
      tags:
        - Companies
      summary: "Search Company Actitities"
      description: "Fields listed as Date will be returned in ISO 8601 Format. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Query
          in: query
          type: string
          required: false
          description: "Create a Search"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
        - name: Filter
          in: query
          type: string
          required: false
          description: "Include additional filters to the query to limit or append items to the result. Supported filters for this resource included: Deleted."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CompanyActivitiesResponseSchemaScribe"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /companies/activities/{ActivityId}:
    get:
      operationId: getCompanyActivitiyByActivityId
      tags:
        - Companies
      summary: "Get a Company Activity by ActivityId"
      description: "Fields listed as Date will be returned in ISO 8601 Format. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: ActivityId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the activity that needs to be fetched."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CompanyActivity"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /companies/DistinctFields:
    get:
      operationId: getCompanyDistinctFields
      tags:
        - Companies
      summary: "Get Distinct Fields"
      description: "Fields listed as Date will be returned in ISO 8601 Format.<br />Custom Date fields will be returned based on the Accept Language unless they are stored with alpha and numeric characters. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified.<br />When searching for records on a rollup list, use the field name Rollup."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: Custom
          in: query
          type: string
          required: false
          description: "The custom field that you want to retrieve (comma separated)"
        - name: Rollups
          in: query
          type: string
          required: false
          description: "Rollup List which the record will be on."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/DistinctFields"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /companies/rolluplists/{RollupCode}:
    get:
      operationId: getCompanyRollupRecordsByRollupCode
      tags:
        - Companies
      summary: "Search for Company Rollup Records by Rollup Code"
      description: "Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: RollupCode
          in: path
          type: string
          required: true
          description: "The Rollup you want to retrieve candidates rollup records from"
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CompanyRollupRecord"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /interviews:
    get:
      operationId: getInterviews
      tags:
        - Interviews
      summary: "Search Interiew Records"
      description: "Fields listed as Date will be returned in ISO 8601 Format.<br />Custom Date fields will be returned based on the Accept Language unless they are stored with alpha and numeric characters. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified.<br />When searching for records on a rollup list, use the field name Rollup."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Query
          in: query
          type: string
          required: false
          description: "Create a search"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
        - name: Filter
          in: query
          type: string
          required: false
          description: "Include additional filters to the query to limit or append items to the result. Supported filters for this resource included: Deleted."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/InterviewsResponseSchemaScribe"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    post:
      operationId: createInterview
      tags:
        - Interviews
      summary: "Create a new Interview."
      description: "Batch processing to create more than one interview per request is currently not supported."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: "Interview Request Body"
          in: body
          required: true
          description: "The Interview to create"
          schema:
            $ref: "#/definitions/Interview"
      responses:
        200:
          description: "Interview created."
          schema:
            $ref: "#/definitions/InterviewIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /interviews/{InterviewId}:
    get:
      operationId: getInterviewById
      tags:
        - Interviews
      summary: "Get an Interview By InterviewId"
      description: "Fields listed as Date will be returned in ISO 8601 Format.<br />Custom Date fields will be returned based on the Accept Language unless they are stored with alpha and numeric characters. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified.<br />When searching for records on a rollup list, use the field name Rollup."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: InterviewId
          in: path
          type: integer
          format: int64
          required: true
          description: "The InterviewId of the interview record that needs to be fetched."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Interview"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /placements:
    get:
      operationId: getPlacements
      tags:
        - Placements
      summary: "Search Placement Records"
      description: "Fields listed as Date will be returned in ISO 8601 Format.<br />Custom Date fields will be returned based on the Accept Language unless they are stored with alpha and numeric characters. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified.<br />When searching for records on a rollup list, use the field name Rollup."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Custom
          in: query
          type: string
          required: false
          description: "The custom fields that you would like to retrieve (comma separated)"
        - name: Query
          in: query
          type: string
          required: false
          description: "Create a search"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
        - name: Filter
          in: query
          type: string
          required: false
          description: "Include additional filters to the query to limit or append items to the result. Supported filters for this resource included: Deleted."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PlacementsResponseSchemaScribe"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    post:
      operationId: createPlacement
      tags:
        - Placements
      summary: "Create a new Placement."
      description: "Batch processing to create more than one placement per request is currently not supported."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: "Placement Request Body"
          in: body
          required: true
          description: "The Placement to create"
          schema:
            $ref: "#/definitions/Placement"
      responses:
        200:
          description: "Placement created."
          schema:
            $ref: "#/definitions/PlacementIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /placements/{PlacementId}:
    get:
      operationId: getPlacementById
      tags:
        - Placements
      summary: "Get a Placement By InterviewId"
      description: "Fields listed as Date will be returned in ISO 8601 Format.<br />Custom Date fields will be returned based on the Accept Language unless they are stored with alpha and numeric characters. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified.<br />When searching for records on a rollup list, use the field name Rollup."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: PlacementId
          in: path
          type: integer
          format: int64
          required: true
          description: "The PlacementId of the placement record that needs to be fetched."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Custom
          in: query
          type: string
          required: false
          description: "The custom field that you would like to retrieve (comma separated)"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Placement"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    put:
      operationId: updatePlacementById
      tags:
        - Placements
      summary: "Update a Placement By PlacementId"
      description: "A successful update of a placement record will return the PlacementId of the record. <br /> Custom Fields on Placement Records are only supported for PCR9 Clients."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: PlacementId
          in: path
          type: integer
          format: int64
          required: true
          description: "The PlacementId of the placement record that needs to be fetched."
        - name: Placement
          in: body
          required: true
          schema:
            $ref: "#/definitions/Placement"
          description: "The placement to update"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PlacementIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /positions:
    get:
      operationId: getPositions
      tags:
        - Positions
      summary: "Search Position Records"
      description: "Fields listed as Date will be returned in ISO 8601 Format.<br />Custom Date fields will be returned based on the Accept Language unless they are stored with alpha and numeric characters. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified.<br />When searching for records on a rollup list, use the field name Rollup."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Custom
          in: query
          type: string
          required: false
          description: "The custom fields that you would like to retrieve (comma separated)"
        - name: Eeoc
          in: query
          type: string
          required: false
          description: "The eeoc fields that you want to retrieve (comma separated).  Fields available include: category, location, OFCCP."
        - name: Query
          in: query
          type: string
          required: false
          description: "Create a search"
        - name: Keywords
          in: query
          type: string
          required: false
          description: "Search records by keyword"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
        - name: Filter
          in: query
          type: string
          required: false
          description: "Include additional filters to the query to limit or append items to the result. Supported filters for this resource included: Deleted."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PositionsResponseSchemaScribe"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    post:
      operationId: createPosition
      tags:
        - Positions
      summary: "Create a new Position."
      description: "Batch processing to create more than one position per request is currently not supported."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: "Position"
          in: body
          required: true
          description: "The Position to create"
          schema:
            $ref: "#/definitions/Position"
      responses:
        200:
          description: "Position created."
          schema:
            $ref: "#/definitions/PositionJobIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /positions/{JobId}:
    get:
      operationId: getPositionByJobId
      tags:
        - Positions
      summary: "Get a Position by JobId"
      description: "Fields listed as Date will be returned in ISO 8601 Format.<br />Custom Date fields will be returned based on the Accept Language unless they are stored with alpha and numeric characters. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified.<br />When searching for records on a rollup list, use the field name Rollup."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: JobId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position that needs to be fetched."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Custom
          in: query
          type: string
          required: false
          description: "The custom field that you would like to retrieve (comma separated)"
        - name: Eeoc
          in: query
          type: string
          required: false
          description: "The eeoc fields that you want to retrieve (comma separated). Fields available include: category, location, OFCCP."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Position"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    put:
      operationId: updatePositionByJobId
      tags:
        - Positions
      summary: "Update a Placement By PlacementId"
      description: "A successful update of a placement record will return the PlacementId of the record. <br /> Custom Fields on Placement Records are only supported for PCR9 Clients."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: JobId
          in: path
          type: integer
          format: int64
          required: true
          description: "The JobId of the position that needs to be updated."
        - name: Position
          in: body
          required: true
          schema:
            $ref: "#/definitions/Position"
          description: "The position to update"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PositionJobIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /positions/{JobId}/attachments:
    get:
      operationId: getAttachmentsByJobId
      tags:
        - Positions
      summary: "Get an Attachment by JobId"
      description: "This resource returns position attachments for a requested position."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: JobId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position that needs to be fetched."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Query
          in: query
          type: string
          required: false
          description: "Create a Search"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
        - name: Filter
          in: query
          type: string
          required: false
          description: "Include additional filters to the query to limit or append items to the result. Supported filters for this resource included: Deleted."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/GetAttachmentsResponseScribe"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    post:
      operationId: createPositionAttachment
      tags:
        - Positions
      summary: "Create a new Position Attachment"
      description: "Batch processing to create more than one position attachment per request is currently not supported."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: JobId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position for the request."
        - name: "Position Attachments Body"
          in: body
          required: true
          schema:
            $ref: "#/definitions/Attachment"
          description: "The Position Attachment to create"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AttachmentIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /positions/{JobId}/attachments/{AttachmentId}:
    get:
      operationId: getPositionAttachmentByAttachmentId
      tags:
        - Positions
      summary: "Get Position Attachment by AttachmentId"
      description: "This resource returns position attachments for a requested position."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: JobId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position that needs to be fetched."
        - name: AttachmentId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the requested attachment."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Attachment"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    put:
      operationId: updatePositionAttachmentByAttachmentId
      tags:
        - Positions
      summary: "Update a Position Attachment"
      description: "Batch processing to update more than one position attachment per request is currently not supported."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: AttachmentId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position attachment for the request."
        - name: JobId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position for the request."
        - name: "Position Attachments Body"
          in: body
          required: true
          schema:
            $ref: "#/definitions/Attachment"
          description: "The Position Attachment to update"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AttachmentIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /positions/{JobId}/activities:
    get:
      operationId: getPositionActivitiesByJobId
      tags:
        - Positions
      summary: "Search Position Actitities by JobId"
      description: "Fields listed as Date will be returned in ISO 8601 Format. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: JobId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position that needs to be fetched."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Query
          in: query
          type: string
          required: false
          description: "Create a Search"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
        - name: Filter
          in: query
          type: string
          required: false
          description: "Include additional filters to the query to limit or append items to the result. Supported filters for this resource included: Deleted."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PositionActivitiesResponseSchemaScribe"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response"
    post:
      operationId: createPositionActivity
      tags:
        - Positions
      summary: "Create a new Position Activity"
      description: "Batch processing to create more than one position activity per request is currently not supported."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: JobId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position for the request."
        - name: "Position Activity"
          in: body
          required: true
          schema:
            $ref: "#/definitions/PositionActivity"
          description: "The Position Activity to create"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PositionActivityIdResponse"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response"
  /positions/activities:
    get:
      operationId: getPositionActivities
      tags:
        - Positions
      summary: "Search Position Actitities"
      description: "Fields listed as Date will be returned in ISO 8601 Format. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Query
          in: query
          type: string
          required: false
          description: "Create a Search"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
        - name: Filter
          in: query
          type: string
          required: false
          description: "Include additional filters to the query to limit or append items to the result. Supported filters for this resource included: Deleted."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PositionActivitiesResponseSchemaScribe"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /positions/activities/{ActivityId}:
    get:
      operationId: getPositionActivitieByActivityId
      tags:
        - Positions
      summary: "Get a Position Activity by ActivityId"
      description: "Fields listed as Date will be returned in ISO 8601 Format. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: ActivityId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the activity that needs to be fetched."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PositionActivity"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /positions/DistinctFields:
    get:
      operationId: getPositionDistinctFields
      tags:
        - Positions
      summary: "Get Distinct Fields"
      description: "Fields listed as Date will be returned in ISO 8601 Format.<br />Custom Date fields will be returned based on the Accept Language unless they are stored with alpha and numeric characters. <br />Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified.<br />When searching for records on a rollup list, use the field name Rollup."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: Custom
          in: query
          type: string
          required: false
          description: "The custom field that you want to retrieve (comma separated)"
        - name: Rollups
          in: query
          type: string
          required: false
          description: "Rollup List which the record will be on."
        - name: OnJobBoard
          in: query
          type: string
          required: false
          description: "Use the values <strong>Internal</strong> and/or <strong>External</strong>.  This will limit the result set to only jobs which should be visible on the internal or external job boards.  In the event both are needed just comma separate the values.<br /><br />  ..DistinctFields?OnJobBoard=Internal,External"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/DistinctFields"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /positions/{JobId}/associations/rolluplists:
    get:
      operationId: getPositionAssociatedRollupLists
      tags:
        - Positions
      summary: "Returns all Rollup Lists Associated to JobId"
      description: "Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: JobId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position that needs to be fetched."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Query
          in: query
          type: string
          required: false
          description: "Create a Search"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
        - name: Filter
          in: query
          type: string
          required: false
          description: "Include additional filters to the query to limit or append items to the result. Supported filters for this resource included: Deleted."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AssociationsResponseSchema"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /positions/{JobId}/associations/rolluplists/{RollupCode}:
    get:
      operationId: addAssociatedRollupListToJobId
      tags:
        - Positions
      summary: "Associate the RollupList to JobId"
      description: "Batch processing to add more than one Rollup List per request is currently not supported."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: JobId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position that needs to be fetched."
        - name: RollupCode
          in: path
          type: string
          required: true
          description: "The RollupCode of the Rollup List that needs to be associated with the position."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Association"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    delete:
      operationId: deleteAssociatedRollupListFromJobId
      tags:
        - Positions
      summary: "Remove Rollup List Association to JobId"
      description: "Calling this with the DELETE method will remove that Rollup List from being assoicated with the JobId provided.  Upon making a successful DELETE the response will be <strong>True</strong>."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: JobId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position that needs to be fetched."
        - name: RollupCode
          in: path
          type: string
          required: true
          description: "The RollupCode of the Rollup List that needs to be associated with the position."
      responses:
        204:
          description: "Rollup List Association has been removed from JobId"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /positions/rolluplists/{RollupCode}:
    get:
      operationId: getPositionRollupListByRollupCode
      tags:
        - Positions
      summary: "Search for Position Rollup Records by Rollup Code"
      description: "Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: RollupCode
          in: path
          type: integer
          format: int64
          required: true
          description: "The Rollup you want to retrieve position rollup records from"
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PositionRollupRecord"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /positions/rolluplists/{RollupCode}/{JobId}:
    get:
      operationId: getPositionRollupListByRollupCodeAndJobId
      tags:
        - Positions
      summary: "Get a Position Rollup Record by Rollup Code And Company Id"
      description: "Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: JobId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position that needs to be fetched."
        - name: RollupCode
          in: path
          type: string
          required: true
          description: "The RollupCode of the Rollup List that needs to be associated with the position."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PositionRollupRecord"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    post:
      operationId: addPositionToRollupList
      tags:
        - Positions
      summary: "Add a Position to a Rollup List"
      description: "Add a Position to a Rollup List"
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: JobId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position that needs to be fetched."
        - name: RollupCode
          in: path
          type: string
          required: true
          description: "The RollupCode of the Rollup List that needs to be associated with the position."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PositionRollupRecord"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    put:
      operationId: updatePositionRollupByJobId
      tags:
        - Positions
      summary: "Update a Position Rollup Record"
      description: "A successful update of a candidate rollup record will return Success:true"
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: JobId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position that needs to be fetched."
        - name: RollupCode
          in: path
          type: string
          required: true
          description: "The RollupCode of the Rollup List that needs to be associated with the position."
        - name: Stage
          in: body
          required: true
          description: "The Rollup Stage to set the position rollup record to"
          schema:
            $ref: "#/definitions/PositionRollupRecordStageUpdate"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PositionRollupRecord"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
    delete:
      operationId: deletePositionRollupByJobId
      tags:
        - Positions
      summary: "Remove a Position From a Rollup List"
      description: "Upon making a successful DELETE the response will be <strong>True</strong>."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: JobId
          in: path
          type: integer
          format: int64
          required: true
          description: "The id of the position that needs to be fetched."
        - name: RollupCode
          in: path
          type: string
          required: true
          description: "The RollupCode of the Rollup List that needs to be associated with the position."
      responses:
        204:
          description: "Position removed from RollupList"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response" 
  /users:
    get:
      operationId: getUsers
      tags:
        - Users
      summary: "Search Users Records"
      description: "Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
        - name: Query
          in: query
          type: string
          required: false
          description: "Create a search"
        - name: Order
          in: query
          type: string
          required: false
          description: "Select a field to order by followed by ASC or DESC.  Comma separated multiple fields to order by."
        - name: Page
          in: query
          type: integer
          required: false
          description: "Define which page of results will return."
        - name: ResultsPerPage
          in: query
          type: integer
          required: false
          description: "Define how many results will return per page (maximum 100)."
        - name: Filter
          in: query
          type: string
          required: false
          description: "Include additional filters to the query to limit or append items to the result. Supported filters for this resource included: Deleted."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UsersResponseSchemaScribe"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response"
  /users/{UserName}:
    get:
      operationId: getUserByUserName
      tags:
        - Users
      summary: "Get User by UserName"
      description: "Accept-Language defaults to en-US if not specified. <br /> Content Type defaults to Application/json if not specified."
      parameters:
        - name: SessionId
          in: query
          required: true
          type: string
        - name: UserName
          in: path
          type: string
          required: true
          description: "The UserName of the User Record that needs to be fetched."
        - name: Fields
          in: query
          type: string
          required: false
          description: "The specific fields that you want to retrieve (comma separated)"
        - name: FieldsPlus
          in: query
          type: string
          required: false
          description: "The fields that you want to add to the standard field list (comma separated)"
        - name: FieldsMinus
          in: query
          type: string
          required: false
          description: "The fields that you want to remove from the standard field list (comma separated)"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid Database Id"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        401:
          description: "Invalid Username or Password"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        403:
          description: "Forbidden request."
          schema:
            $ref: "#/definitions/NotOkayResponse"
        404:
          description: "Endpoint not found"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        405:
          description: "Access token must be retrieved over SSL"  
          schema:
            $ref: "#/definitions/NotOkayResponse"
        500:
          description: "Session Expired"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        503:
          description: "Service is unavailable"
          schema:
            $ref: "#/definitions/NotOkayResponse"
        default:
          description: "Unexpected response"
definitions:
  ##########################
  #                        #
  #  RESPONSE DEFINITIONS  #
  #                        #
  ##########################
  NotOkayResponse:
    type: object
    properties:
      errors:
        type: array
        items:
          type: string
  ##########################
  #                        #
  #   OBJECT DEFINITIONS   #
  #                        #
  ##########################
  AccessToken:
    type: object
    properties:
      SessionId:
        type: string
  GetAttachmentsResponse:
    type: object
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          "$ref": "#/definitions/Attachment"
  GetAttachmentsResponseScribe:
    type: object
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          "$ref": "#/definitions/AttachmentScribe"
  Attachment:
    type: object
    properties:
      AttachmentId:
        type: integer
        format: int64
      Name:
        type: string
      Description:
        type: string
      Size:
        type: integer
      Date:
        type: string
        format: date
      Data:
        type: string
      Type:
        type: string
        enum:
          - Upload
          - HTML
          - LinkedFile
          - Profile
  AttachmentScribe:
    type: object
    properties:
      AttachmentId:
        type: integer
        format: int64
      Name:
        type: string
      Description:
        type: string
      Size:
        type: integer
      Date:
        type: string
        format: date
      Data:
        type: string
      Type:
        type: string
        enum:
          - Upload
          - HTML
          - LinkedFile
          - Profile
  AttachmentIdResponse:
    type: object
    properties:
      AttachmentId:
        type: integer
        format: int64
  Association:
    type: object
    properties:
      RollupCode:
        type: string
      UserName:
        type: string
      Description:
        type: string
      Category:
        type: string
      Owner:
        type: string
      Shared:
        type: boolean
      DefaultActivity:
        type: string
  AssociationsResponseSchema:
    type: object
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          $ref: "#/definitions/Association"
  CandidatesResponseSchema:
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          "$ref": "#/definitions/Candidate"
    type: object
  # Since you can't have more than one nested array in
  # Scribe for the REST Connector to parse things properly...
  CandidatesResponseSchemaScribe:
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          "$ref": "#/definitions/CandidateScribe"
    type: object
  CandidateScribe:
    type: object
    properties:
      CandidateId:
        type: integer
        format: int64
      CompanyId:
        type: integer
        format: int64
      CompanyName:
        type: string
      CompanyUserName:
        type: string
      FirstName:
        type: string
      LastName:
        type: string
      MiddleInitial:
        type: string
      Salutation:
        type: string
      Title:
        type: string
      Address:
        type: string
      Address2:
        type: string
      City:
        type: string
      State:
        type: string
      PostalCode:
        type: string
      PostalCodeExtension:
        type: string
      County:
        type: string
      Country:
        type: string
      HomePhone:
        type: string
      FaxPhone:
        type: string
      Pager:
        type: string
      MobilePhone:
        type: string
      WorkPhone:
        type: string
      Relocate:
        type: string
      CurrentSalary:
        $ref: "#/definitions/Currency"
      DesiredSalary:
        $ref: "#/definitions/Currency"
      School:
        type: string
      DegreeType:
        type: string
      GradYear:
        type: string
      DateEntered:
        type: string
        format: date
      EmailAddress:
        type: string
      Industry:
        type: string
      Specialty:
        type: string
      Status:
        type: string
        enum:
          - OnAssignment
          - Candidate
          - Employee
          - Internal
          - HiringAuthority
          - Manager
          - OfferAccepted
          - Placed
          - ContractorTemp
          - DevelopedQualified
          - Submitted
          - Unverified
          - Reference
          - Vendor
          - Not Available
        description: Candidate Status
      ShowOnWebRollup:
        type: string
      Subjective:
        type: number
        format: double
      HasResume:
        type: boolean
      NoteFlag:
        type: boolean
      OptOut:
        type: boolean
      ProfileLine1:
        type: string
      ProfileLine2:
        type: string
      ProfileLine3:
        type: string
      ProfileLine4:
        type: string
      ProfileLine5:
        type: string
      ProfileLine6:
        type: string
      ProfileLine7:
        type: string
      ProfileLine8:
        type: string
      ProfileLine9:
        type: string
      Keywords:
        type: string
      Notes:
        type: string
      Identification:
        type: string
      LastActivity:
        type: string
        format: date
      LastModified:
        type: string
        format: date
      Available:
        type: string
        format: date
      BillRate:
        $ref: "#/definitions/Currency"
      PayRate:
        $ref: "#/definitions/Currency"
      DefaultCurrency:
        type: string
      UserName:
        type: string
      Photograph:
        type: string
      PhotographThumb:
        type: string
      Group:
        type: string
        enum:
          - Group1
          - Group2
          - VisibleOnInternet
          - Coop
          - Unsolicited
        description: Candidate Group
      Summary:
        type: string
      ResumeText:
        type: string
  Candidate:
    type: object
    properties:
      CandidateId:
        type: integer
        format: int64
      CompanyId:
        type: integer
        format: int64
      CompanyName:
        type: string
      CompanyUserName:
        type: string
      FirstName:
        type: string
      LastName:
        type: string
      MiddleInitial:
        type: string
      Salutation:
        type: string
      Title:
        type: string
      Address:
        type: string
      Address2:
        type: string
      City:
        type: string
      State:
        type: string
      PostalCode:
        type: string
      PostalCodeExtension:
        type: string
      County:
        type: string
      Country:
        type: string
      HomePhone:
        type: string
      FaxPhone:
        type: string
      Pager:
        type: string
      MobilePhone:
        type: string
      WorkPhone:
        type: string
      Relocate:
        type: string
      CurrentSalary:
        $ref: "#/definitions/Currency"
      DesiredSalary:
        $ref: "#/definitions/Currency"
      School:
        type: string
      DegreeType:
        type: string
      GradYear:
        type: string
      DateEntered:
        type: string
        format: date
      EmailAddress:
        type: string
      Industry:
        type: string
      Specialty:
        type: string
      Status:
        type: string
        enum:
          - OnAssignment
          - Candidate
          - Employee
          - Internal
          - HiringAuthority
          - Manager
          - OfferAccepted
          - Placed
          - ContractorTemp
          - DevelopedQualified
          - Submitted
          - Unverified
          - Reference
          - Vendor
          - Not Available
        description: Candidate Status
      ShowOnWebRollup:
        type: string
      Subjective:
        type: number
        format: double
      HasResume:
        type: boolean
      NoteFlag:
        type: boolean
      OptOut:
        type: boolean
      ProfileLine1:
        type: string
      ProfileLine2:
        type: string
      ProfileLine3:
        type: string
      ProfileLine4:
        type: string
      ProfileLine5:
        type: string
      ProfileLine6:
        type: string
      ProfileLine7:
        type: string
      ProfileLine8:
        type: string
      ProfileLine9:
        type: string
      Keywords:
        type: string
      Notes:
        type: string
      Identification:
        type: string
      LastActivity:
        type: string
        format: date
      LastModified:
        type: string
        format: date
      Available:
        type: string
        format: date
      BillRate:
        $ref: "#/definitions/Currency"
      PayRate:
        $ref: "#/definitions/Currency"
      DefaultCurrency:
        type: string
      UserName:
        type: string
      Photograph:
        type: string
      PhotographThumb:
        type: string
      Group:
        type: string
        enum:
          - Group1
          - Group2
          - VisibleOnInternet
          - Coop
          - Unsolicited
        description: Candidate Group
      Summary:
        type: string
      ResumeText:
        type: string
      RollupListMembership:
        type: array
        items:
          $ref: "#/definitions/RollupListMember"
      CustomFields:
        type: array
        items:
          $ref: "#/definitions/CustomField"
      EEOC:
        type: array
        items:
          $ref: "#/definitions/EeocField"
  CandidateIdResponse:
    type: object
    properties:
      CandidateId:
        type: integer
        format: int64
  CandidateActivitiesResponseSchema:
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          "$ref": "#/definitions/CandidateActivity"
    type: object
  CandidateActivitiesResponseSchemaScribe:
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          "$ref": "#/definitions/CandidateActivityScribe"
    type: object
  CandidateActivity:
    type: object
    properties:
      ActivityId:
        type: integer
        format: int64
      CandidateId:
        type: integer
        format: int64
      UserName:
        type: string
      ActivityDate:
        type: string
        format: date
      ActivityType:
        type: string
      ActivityText:
        type: string
      ActivityResult:
        type: string
  CandidateActivityScribe:
    type: object
    properties:
      ActivityId:
        type: integer
        format: int64
      CandidateId:
        type: integer
        format: int64
      UserName:
        type: string
      ActivityDate:
        type: string
        format: date
      ActivityType:
        type: string
      ActivityText:
        type: string
      ActivityResult:
        type: string
  CandidateActivityIdResponse:
    type: object
    properties:
      ActivityId:
        type: integer
        format: int64
  CandidateRollupRecord:
    type: object
    properties:
      CandidateId:
        type: integer
        format: int64
      RollupCode:
        type: string
      Stage:
        type: string
        enum:
          - Stage0
          - Stage1
          - Stage2
          - Stage3
          - Stage4
          - Stage5
          - Stage6
          - Stage7
          - Stage8
          - Stage9
          - Stage10
          - Stage11
          - Closed
          - Attempt
          - Wrong
          - Low
          - Medium
          - High
          - Results
        description: Stage Values
      DateEntered:
        type: string
        format: date
      DateRead:
        type: string
        format: date
      Description:
        type: string
  CandidateRollupRecordStageUpdate:
    type: object
    properties:
      Stage:
        type: string
        enum:
          - Stage0
          - Stage1
          - Stage2
          - Stage3
          - Stage4
          - Stage5
          - Stage6
          - Stage7
          - Stage8
          - Stage9
          - Stage10
          - Stage11
          - Closed
          - Attempt
          - Wrong
          - Low
          - Medium
          - High
          - Results
        description: Stage Values
  Company:
    type: object
    properties:
      CompanyId:
        type: integer
        format: int64
      CompanyName:
        type: string
      UserName:
        type: string
      Address:
        type: string
      Address2:
        type: string
      City:
        type: string
      State:
        type: string
      PostalCode:
        type: string
      PostalCodeExtension:
        type: string
      County:
        type: string
      Country:
        type: string
      Phone:
        type: string
      Fax:
        type: string
      EmailWWWAddress:
        type: string
      DefaultCurrency:
        type: string
      IndustryCode:
        type: string
      NumberOfEmployees:
        type: integer
      AnnualRevenue:
        $ref: "#/definitions/Currency"
      DivisionOf:
        type: string
      CompanyType:
        type: string
        enum:
          - Available
          - Client
          - Default
          - Vendor
      Industry:
        type: string
      Speciality:
        type: string
      Subjective:
        type: string
      Keywords:
        type: string
      Summary:
        type: string
      Notes:
        type: string
      NoteFale:
        type: boolean
      LastActivity:
        type: string
        format: date
      LastModified:
        type: string
        format: date
      RollupListMembership:
        items:
          $ref: "#/definitions/RollupListMember"
        type: array
      CustomFields:
        items:
          $ref: "#/definitions/CustomField"
        type: array
      EEOC:
        items:
          $ref: "#/definitions/EeocField"
        type: array
  # Since you can't have more than one nested array in
  # Scribe for the REST Connector to parse things properly...
  CompanyScribe:
    type: object
    properties:
      CompanyId:
        type: integer
        format: int64
      CompanyName:
        type: string
      UserName:
        type: string
      Address:
        type: string
      Address2:
        type: string
      City:
        type: string
      State:
        type: string
      PostalCode:
        type: string
      PostalCodeExtension:
        type: string
      County:
        type: string
      Country:
        type: string
      Phone:
        type: string
      Fax:
        type: string
      EmailWWWAddress:
        type: string
      DefaultCurrency:
        type: string
      IndustryCode:
        type: string
      NumberOfEmployees:
        type: integer
      AnnualRevenue:
        $ref: "#/definitions/Currency"
      DivisionOf:
        type: string
      CompanyType:
        type: string
        enum:
          - Available
          - Client
          - Default
          - Vendor
      Industry:
        type: string
      Speciality:
        type: string
      Subjective:
        type: string
      Keywords:
        type: string
      Summary:
        type: string
      Notes:
        type: string
      NoteFale:
        type: boolean
      LastActivity:
        type: string
        format: date
      LastModified:
        type: string
        format: date
  CompanyIdResponse:
    type: object
    properties:
      CompanyId:
        type: integer
        format: int64
  CompaniesResponseSchema:
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          "$ref": "#/definitions/Company"
    type: object
  # Since you can't have more than one nested array in
  # Scribe for the REST Connector to parse things properly...
  CompaniesResponseSchemaScribe:
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          "$ref": "#/definitions/CompanyScribe"
    type: object
  CompanyActivitiesResponseSchema:
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          "$ref": "#/definitions/CompanyActivity"
    type: object
  CompanyActivitiesResponseSchemaScribe:
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          "$ref": "#/definitions/CompanyActivityScribe"
    type: object
  CompanyActivity:
    type: object
    properties:
      ActivityId:
        type: integer
        format: int64
      CompanyId:
        type: integer
        format: int64
      UserName:
        type: string
      ActivityDate:
        type: string
      ActivityType:
        type: string
      ActivityText:
        type: string
      ActivityResult:
        type: string
  CompanyActivityScribe:
    type: object
    properties:
      ActivityId:
        type: integer
        format: int64
      CompanyId:
        type: integer
        format: int64
      UserName:
        type: string
      ActivityDate:
        type: string
      ActivityType:
        type: string
      ActivityText:
        type: string
      ActivityResult:
        type: string
  CompanyActivityIdResponse:
    type: object
    properties:
      ActivityId:
        type: integer
        format: int64
  CompanyRollupRecord:
    type: object
    properties:
      CompanyId:
        type: integer
        format: int64
      RollupCode:
        type: string
      Stage:
        type: string
        enum:
          - Stage0
          - Stage1
          - Stage2
          - Stage3
          - Stage4
          - Stage5
          - Stage6
          - Stage7
          - Stage8
          - Stage9
          - Stage10
          - Stage11
          - Closed
          - Attempt
          - Wrong
          - Low
          - Medium
          - High
          - Results
        description: "Stage Values"
      DateEntered:
        type: string
        format: date
      DateRead:
        type: string
        format: date
      Description:
        type: string
  CompanyRollupRecordStageUpdate:
    type: object
    properties:
      Stage:
        type: string
        enum:
          - Stage0
          - Stage1
          - Stage2
          - Stage3
          - Stage4
          - Stage5
          - Stage6
          - Stage7
          - Stage8
          - Stage9
          - Stage10
          - Stage11
          - Closed
          - Attempt
          - Wrong
          - Low
          - Medium
          - High
          - Results
        description: "Stage Values"
  Currency:
    type: object
    properties:
      CurrencyCode:
        type: string
      Value:
        type: number
        format: double
  CustomField:
    type: object
    properties:
      FieldName:
        type: string
      FieldType:
        type: string
      Values:
        type: array
        items:
          type: string
  EeocValue:
    type: object
    properties:
      JobId:
        type: integer
        format: int64
      Value:
        type: string
  EeocField:
    type: object
    properties:
      Field:
        type: string
      Values:
        type: array
        items:
          $ref: "#/definitions/EeocValue"
  DistinctValue:
    type: object
    properties:
      value:
        type: string
      count:
        type: integer
  DistinctField:
    type: object
    properties:
      FieldName:
        type: string
      DistinctValues:
        type: array
        items:
          $ref: "#/definitions/DistinctValue"
  DistinctFields:
    type: object
    properties:
      PredefinedFields:
        type: array
        items:
          $ref: "#/definitions/DistinctField"
      CustomFields:
        type: array
        items:
          $ref: "#/definitions/DistinctField"
  InterviewerData:
    type: object
    properties:
      CandidateId:
        type: integer
        format: int64
      Name:
        type: string
  Interview:
    type: object
    properties:
      InterviewId:
        type: integer
        format: int64
      AppointmentData:
        type: string
        format: date
      ArrangedDate:
        type: string
        format: date
      LastModified:
        type: string
        format: date
      InterviewType:
        type: string
        enum:
          - Presentation
          - Resume
          - Telephone
          - InPerson
          - UserDefined1
          - UserDefined2
          - UserDefined3
          - UserDefined4
          - UserDefined5
          - OfferStage
          - OfferMade
          - OfferDeclined
          - OfferAccepted
          - OutOfProcess
          - Other
        description: "Placement Type"
      CompanyName:
        type: string
      CompanyId:
        type: string
      JobTitle:
        type: string
      PositionId:
        type: string
      JobId:
        type: integer
        format: int64
      CandidateName:
        type: string
      CandidateId:
        type: integer
        format: int64
      WrittenBy:
        type: string
      BillRate:
        $ref: "#/definitions/Currency"
      PayRate:
        $ref: "#/definitions/Currency"
      Feedback:
        type: string
      Guarantee:
        type: string
      Notes:
        type: string
      InterviewStatus:
        type: string
      CurrentInterviewStatus:
        type: string
      Interviewer:
        type: array
        items:
          $ref: "#/definitions/InterviewerData"
      VisibleOnWeb:
        type: boolean
      CurrentInterviewType:
        type: string
        enum:
          - ContractTemp
          - PermanentPlacement
          - Presentation
          - Resume
          - Telephone
          - InPerson
          - UserDefined1
          - UserDefined2
          - UserDefined3
          - UserDefined4
          - UserDefined5
          - OfferStage
          - OfferMade
          - OfferDeclined
          - OfferAccepted
          - OutOfProcess
          - Other
        description: "Current Interview Type"
      DefaultCurrency:
        type: string
  InterviewScribe:
    type: object
    properties:
      InterviewId:
        type: integer
        format: int64
      AppointmentData:
        type: string
        format: date
      ArrangedDate:
        type: string
        format: date
      LastModified:
        type: string
        format: date
      InterviewType:
        type: string
        enum:
          - Presentation
          - Resume
          - Telephone
          - InPerson
          - UserDefined1
          - UserDefined2
          - UserDefined3
          - UserDefined4
          - UserDefined5
          - OfferStage
          - OfferMade
          - OfferDeclined
          - OfferAccepted
          - OutOfProcess
          - Other
        description: "Placement Type"
      CompanyName:
        type: string
      CompanyId:
        type: string
      JobTitle:
        type: string
      PositionId:
        type: string
      JobId:
        type: integer
        format: int64
      CandidateName:
        type: string
      CandidateId:
        type: integer
        format: int64
      WrittenBy:
        type: string
      BillRate:
        $ref: "#/definitions/Currency"
      PayRate:
        $ref: "#/definitions/Currency"
      Feedback:
        type: string
      Guarantee:
        type: string
      Notes:
        type: string
      InterviewStatus:
        type: string
      CurrentInterviewStatus:
        type: string
      VisibleOnWeb:
        type: boolean
      CurrentInterviewType:
        type: string
        enum:
          - ContractTemp
          - PermanentPlacement
          - Presentation
          - Resume
          - Telephone
          - InPerson
          - UserDefined1
          - UserDefined2
          - UserDefined3
          - UserDefined4
          - UserDefined5
          - OfferStage
          - OfferMade
          - OfferDeclined
          - OfferAccepted
          - OutOfProcess
          - Other
        description: "Current Interview Type"
      DefaultCurrency:
        type: string
  # Since you can't have more than one nested array in
  # Scribe for the REST Connector to parse things properly...
  InterviewIdResponse:
    type: object
    properties:
      InterviewId:
        type: integer
        format: int64
  InterviewsResponseSchema:
    type: object
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          $ref: "#/definitions/Interview"
  # Since you can't have more than one nested array in
  # Scribe for the REST Connector to parse things properly...
  InterviewsResponseSchemaScribe:
    type: object
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          $ref: "#/definitions/InterviewScribe"
  Placement:
    type: object
    properties:
      PlacementId:
        type: integer
        format: int64
      StartDate:
        type: string
        format: date
      PlacementDate:
        type: string
        format: date
      LastModified:
        type: string
        format: date
      PlacementType:
        type: string
        enum:
          - ContractTemp
          - PermanentPlacement
        description: "Placement Type"
      CompanyName:
        type: string
      CompanyId:
        type: string
      JobTitle:
        type: string
      PositionId:
        type: string
      JobId:
        type: integer
        format: int64
      CandidateName:
        type: string
      CandidateId:
        type: integer
        format: int64
      Placedby:
        type: string
      BillRate:
        $ref: "#/definitions/Currency"
      PayRate:
        $ref: "#/definitions/Currency"
      Feedback:
        type: string
      Guarantee:
        type: string
      Notes:
        type: string
      PlacementStatus:
        type: string
      CurrentStatus:
        type: string
      Interviewer:
        type: array
        items:
          $ref: "#/definitions/InterviewerData"
      VisibleOnWeb:
        type: boolean
      CurrentInterviewType:
        type: string
        enum:
          - ContractTemp
          - PermanentPlacement
          - Presentation
          - Resume
          - Telephone
          - InPerson
          - UserDefined1
          - UserDefined2
          - UserDefined3
          - UserDefined4
          - UserDefined5
          - OfferStage
          - OfferMade
          - OfferDeclined
          - OfferAccepted
          - OutOfProcess
          - Other
        description: "Current Interview Type"
      DefaultCurrency:
        type: string
      StartingSalary:
        $ref: "#/definitions/Currency"
      PlacementFee:
        $ref: "#/definitions/Currency"
      FeePercentage:
        type: number
        format: double
      EndDate:
        type: string
        format: date
      OvertimeBillRate:
        $ref: "#/definitions/Currency"
      OvertimePayRate:
        $ref: "#/definitions/Currency"
      OnCallBillRate:
        $ref: "#/definitions/Currency"
      OnCallPayRate:
        $ref: "#/definitions/Currency"
      HolidayBillrate:
        $ref: "#/definitions/Currency"
      HolidayPayRate:
        $ref: "#/definitions/Currency"
      DoubleTimeBillRate:
        $ref: "#/definitions/Currency"
      DoubleTimePayRate:
        $ref: "#/definitions/Currency"
      PerDiemDaily:
        $ref: "#/definitions/Currency"
      PerDiemHourly:
        $ref: "#/definitions/Currency"
      BurdenState:
        type: string
      BurdenRate:
        type: number
        format: double
      PayPeriod:
        type: string
        enum:
          - Weekly
          - BiWeeklyOdd
          - BiWeeklyEven
          - TwiceMonthly
          - Monthly
        description: "Current Interview Type"
      PayPeriodStart:
        type: string
        enum:
          - Sunday
          - Monday
          - Tuesday
          - Wednesday
          - Thursday
          - Friday
          - Saturday
        description: "Start of pay period"
      ShowTimeClock:
        type: boolean
      CustomFields:
        type: array
        items:
          $ref: "#/definitions/CustomField"
  # Since you can't have more than one nested array in
  # Scribe for the REST Connector to parse things properly...
  PlacementScribe:
    type: object
    properties:
      PlacementId:
        type: integer
        format: int64
      StartDate:
        type: string
        format: date
      PlacementDate:
        type: string
        format: date
      LastModified:
        type: string
        format: date
      PlacementType:
        type: string
        enum:
          - ContractTemp
          - PermanentPlacement
        description: "Placement Type"
      CompanyName:
        type: string
      CompanyId:
        type: string
      JobTitle:
        type: string
      PositionId:
        type: string
      JobId:
        type: integer
        format: int64
      CandidateName:
        type: string
      CandidateId:
        type: integer
        format: int64
      Placedby:
        type: string
      BillRate:
        $ref: "#/definitions/Currency"
      PayRate:
        $ref: "#/definitions/Currency"
      Feedback:
        type: string
      Guarantee:
        type: string
      Notes:
        type: string
      PlacementStatus:
        type: string
      CurrentStatus:
        type: string
      VisibleOnWeb:
        type: boolean
      CurrentInterviewType:
        type: string
        enum:
          - ContractTemp
          - PermanentPlacement
          - Presentation
          - Resume
          - Telephone
          - InPerson
          - UserDefined1
          - UserDefined2
          - UserDefined3
          - UserDefined4
          - UserDefined5
          - OfferStage
          - OfferMade
          - OfferDeclined
          - OfferAccepted
          - OutOfProcess
          - Other
        description: "Current Interview Type"
      DefaultCurrency:
        type: string
      StartingSalary:
        $ref: "#/definitions/Currency"
      PlacementFee:
        $ref: "#/definitions/Currency"
      FeePercentage:
        type: number
        format: double
      EndDate:
        type: string
        format: date
      OvertimeBillRate:
        $ref: "#/definitions/Currency"
      OvertimePayRate:
        $ref: "#/definitions/Currency"
      OnCallBillRate:
        $ref: "#/definitions/Currency"
      OnCallPayRate:
        $ref: "#/definitions/Currency"
      HolidayBillrate:
        $ref: "#/definitions/Currency"
      HolidayPayRate:
        $ref: "#/definitions/Currency"
      DoubleTimeBillRate:
        $ref: "#/definitions/Currency"
      DoubleTimePayRate:
        $ref: "#/definitions/Currency"
      PerDiemDaily:
        $ref: "#/definitions/Currency"
      PerDiemHourly:
        $ref: "#/definitions/Currency"
      BurdenState:
        type: string
      BurdenRate:
        type: number
        format: double
      PayPeriod:
        type: string
        enum:
          - Weekly
          - BiWeeklyOdd
          - BiWeeklyEven
          - TwiceMonthly
          - Monthly
        description: "Current Interview Type"
      PayPeriodStart:
        type: string
        enum:
          - Sunday
          - Monday
          - Tuesday
          - Wednesday
          - Thursday
          - Friday
          - Saturday
        description: "Start of pay period"
      ShowTimeClock:
        type: boolean
  PlacementIdResponse:
    type: object
    properties:
      PlacementId:
        type: integer
        format: int64
  PlacementsResponseSchema:
    type: object
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          $ref: "#/definitions/Placement"
  # Since you can't have more than one nested array in
  # Scribe for the REST Connector to parse things properly...
  PlacementsResponseSchemaScribe:
    type: object
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          $ref: "#/definitions/PlacementScribe"
  Position:
    type: object
    properties:
      JobId:
        type: integer
        format: int64
      CompanyId:
        type: integer
        format: int64
      CompanyName:
        type: string
      JobTitle:
        type: string
      NumberOfOpenings:
        type: integer
      PositionId:
        type: string
      JobDescription:
        type: string
      JobType:
        type: string
        enum:
          - FullTimeRegular
          - FullTimeTemporary
          - PartTimeRegular
          - PartTimeTemporary
          - ContractFullTime
          - ContractPartTime
          - TempToPlacement
          - Replacement
          - FullTimeCOOP
          - PartTimeCOOP
          - InternshipJLD
          - Exempt
          - NonExempt
      Industry:
        type: string
      Speciality:
        type: string
      DegreeRequired:
        type: string
      MinYearsExp:
        type: integer
      MaxYearsExp:
        type: integer
      MinSalary:
        $ref: "#/definitions/Currency"
      MaxSalary:
        $ref: "#/definitions/Currency"
      DatePosted:
        type: string
        format: date
      City:
        type: string
      State:
        type: string
      PostalCode:
        type: string
      PostalCodeExtension:
        type: string
      Country:
        type: string
      County:
        type: string
      ContactId:
        type: integer
        format: int64
      ContactName:
        type: string
      Department:
        type: string
      ContactPhone:
        type: string
      ContactEmail:
        type: string
      BeginDate:
        type: string
        format: date
      EndDate:
        type: string
        format: date
      UserName:
        type: string
      WhyOpen:
        type: string
      Vacation:
        type: string
      EducationAid:
        type: string
      HealthCoverage:
        type: string
      Status:
        type: string
        enum:
          - Available
          - Filled
          - InternalOnly
          - Pending
          - Hold
          - Expired
          - Closed
          - OfferAccepted
          - NotAvailable
        description: "Position Status"
      Benefits:
        type: string
      Notes:
        type: number
        format: double
      WebNotes:
        type: boolean
      FeePercentage:
        type: string
      BillRate:
        $ref: "#/definitions/Currency"
      PayRate:
        $ref: "#/definitions/Currency"
      Guarantee:
        type: string
      ShowOnWeb:
        type: boolean
      LastActivity:
        type: string
        format: date
      LastModified:
        type: string
        format: date
      InternalJobDescription:
        type: string
      ExternalExpiration:
        type: string
        format: date
      InternalExpiration:
        type: string
        format: date
      StartHold:
        type: string
        format: date
      EndHold:
        type: string
        format: date
      DefaultCurrency:
        type: string
      Keywords:
        type: string
      DirectApplyLink:
        type: string
      DirectJobLink:
        type: string
      RollupListMember:
        $ref: "#/definitions/RollupListMember"
      CustomFields:
        type: array
        items:
          $ref: "#/definitions/CustomField"
      EEOC:
        type: array
        items:
          $ref: "#/definitions/EeocField"
  # Since you can't have more than one nested array in
  # Scribe for the REST Connector to parse things properly...
  PositionScribe:
    type: object
    properties:
      JobId:
        type: integer
        format: int64
      CompanyId:
        type: integer
        format: int64
      CompanyName:
        type: string
      JobTitle:
        type: string
      NumberOfOpenings:
        type: integer
      PositionId:
        type: string
      JobDescription:
        type: string
      JobType:
        type: string
        enum:
          - FullTimeRegular
          - FullTimeTemporary
          - PartTimeRegular
          - PartTimeTemporary
          - ContractFullTime
          - ContractPartTime
          - TempToPlacement
          - Replacement
          - FullTimeCOOP
          - PartTimeCOOP
          - InternshipJLD
          - Exempt
          - NonExempt
      Industry:
        type: string
      Speciality:
        type: string
      DegreeRequired:
        type: string
      MinYearsExp:
        type: integer
      MaxYearsExp:
        type: integer
      MinSalary:
        $ref: "#/definitions/Currency"
      MaxSalary:
        $ref: "#/definitions/Currency"
      DatePosted:
        type: string
        format: date
      City:
        type: string
      State:
        type: string
      PostalCode:
        type: string
      PostalCodeExtension:
        type: string
      Country:
        type: string
      County:
        type: string
      ContactId:
        type: integer
        format: int64
      ContactName:
        type: string
      Department:
        type: string
      ContactPhone:
        type: string
      ContactEmail:
        type: string
      BeginDate:
        type: string
        format: date
      EndDate:
        type: string
        format: date
      UserName:
        type: string
      WhyOpen:
        type: string
      Vacation:
        type: string
      EducationAid:
        type: string
      HealthCoverage:
        type: string
      Status:
        type: string
        enum:
          - Available
          - Filled
          - InternalOnly
          - Pending
          - Hold
          - Expired
          - Closed
          - OfferAccepted
          - NotAvailable
        description: "Position Status"
      Benefits:
        type: string
      Notes:
        type: number
        format: double
      WebNotes:
        type: boolean
      FeePercentage:
        type: string
      BillRate:
        $ref: "#/definitions/Currency"
      PayRate:
        $ref: "#/definitions/Currency"
      Guarantee:
        type: string
      ShowOnWeb:
        type: boolean
      LastActivity:
        type: string
        format: date
      LastModified:
        type: string
        format: date
      InternalJobDescription:
        type: string
      ExternalExpiration:
        type: string
        format: date
      InternalExpiration:
        type: string
        format: date
      StartHold:
        type: string
        format: date
      EndHold:
        type: string
        format: date
      DefaultCurrency:
        type: string
      Keywords:
        type: string
      DirectApplyLink:
        type: string
      DirectJobLink:
        type: string
      RollupListMember:
        $ref: "#/definitions/RollupListMember"
  PositionActivityIdResponse:
    type: object
    properties:
      ActivityId:
        type: integer
        format: int64
  PositionJobIdResponse:
    type: object
    properties:
      JobId:
        type: integer
        format: int64
  PositionsResponseSchema:
    type: object
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          $ref: "#/definitions/Position"
  # Since you can't have more than one nested array in
  # Scribe for the REST Connector to parse things properly...
  PositionsResponseSchemaScribe:
    type: object
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          $ref: "#/definitions/PositionScribe"
  PositionActivitiesResponseSchema:
    type: object
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          $ref: "#/definitions/PositionActivity"
  PositionActivitiesResponseSchemaScribe:
    type: object
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          $ref: "#/definitions/PositionActivityScribe"
  PositionActivity:
    type: object
    properties:
      ActivityId:
        type: integer
        format: int64
      JobId:
        type: integer
        format: int64
      UserName:
        type: string
      ActivityDate:
        type: string
        format: date
      ActivityType:
        type: string
      ActivityText:
        type: string
      ActivityResult:
        type: string
  PositionActivityScribe:
    type: object
    properties:
      ActivityId:
        type: integer
        format: int64
      JobId:
        type: integer
        format: int64
      UserName:
        type: string
      ActivityDate:
        type: string
        format: date
      ActivityType:
        type: string
      ActivityText:
        type: string
      ActivityResult:
        type: string
  PositionRollupRecord:
    type: object
    properties:
      CandidateId:
        type: integer
        format: int64
      RollupCode:
        type: string
      Stage:
        type: string
        enum:
          - Stage0
          - Stage1
          - Stage2
          - Stage3
          - Stage4
          - Stage5
          - Stage6
          - Stage7
          - Stage8
          - Stage9
          - Stage10
          - Stage11
          - Closed
          - Attempt
          - Wrong
          - Low
          - Medium
          - High
          - Results
        description: "Stage Values"
      DateEntered:
        type: string
        format: date
      DateRead:
        type: string
        format: date
      Description:
        type: string
  PositionRollupRecordStageUpdate:
    type: object
    properties:
      Stage:
        type: string
        enum:
          - Stage0
          - Stage1
          - Stage2
          - Stage3
          - Stage4
          - Stage5
          - Stage6
          - Stage7
          - Stage8
          - Stage9
          - Stage10
          - Stage11
          - Closed
          - Attempt
          - Wrong
          - Low
          - Medium
          - High
          - Results
        description: "Stage Values"
  ResumesResponseSchema:
    type: object
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          $ref: "#/definitions/Resume"
  ResumesResponseSchemaScribe:
    type: object
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          $ref: "#/definitions/ResumeScribe"
  Resume:
    type: object
    properties:
      FileName:
        type: string
      Resume:
        type: string
  ResumeScribe:
    type: object
    properties:
      FileName:
        type: string
      Resume:
        type: string
  RollupListMember:
    type: object
    properties:
      RollupCode:
        type: string
  UsersResponseSchema:
    type: object
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          $ref: "#/definitions/User"
  UsersResponseSchemaScribe:
    type: object
    properties:
      TotalRecords:
        type: integer
        format: int64
      Results:
        type: array
        items:
          $ref: "#/definitions/UserScribe"
  User:
    type: object
    properties:
      UserName:
        type: string
      FullName:
        type: string
      EmailAddress:
        type: string
      Phone:
        type: string
      PhoneExt:
        type: string
      ReplicationNumber:
        type: string
      ActiveUser:
        type: boolean
  UserScribe:
    type: object
    properties:
      UserName:
        type: string
      FullName:
        type: string
      EmailAddress:
        type: string
      Phone:
        type: string
      PhoneExt:
        type: string
      ReplicationNumber:
        type: string
      ActiveUser:
        type: boolean